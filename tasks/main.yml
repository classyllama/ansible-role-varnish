---
- name: Check if varnish41 repo is already configured
  stat:
    path: /etc/yum.repos.d/varnishcache_varnish41.repo
  register: varnish_repofile_result

- name: Install varnish41 repo
  template:
    src: varnishcache_varnish41.repo
    dest: /etc/yum.repos.d/varnishcache_varnish41.repo
  when: not varnish_repofile_result.stat.exists

# - name: Import Varnish GPG key
#   rpm_key:
#     key: https://packagecloud.io/varnishcache/varnish41/gpgkey
#     state: present
#   when: not varnish_repofile_result.stat.exists

- name: Generate yum cache for varnish41 repo
  command: yum -q makecache -y --disablerepo='*' --enablerepo='varnishcache_varnish41*'
  args:
    warn: false
  when: not varnish_repofile_result.stat.exists

- name: Install varnish
  yum:
    name: varnish

- name: Disable default varnish service
  service:
    name: varnish
    state: stopped
    enabled: false
  when: ('name' in varnish_instance) and (varnish_instance.name is not none)

- name: Configure internal variables for single-instance
  set_fact:
    varnish_service_vcl: default
    varnish_service_suffix: ""

- name: Configure internal variables for multi-instance
  set_fact:
    varnish_service_vcl: "varnish-{{ varnish_instance.name }}"
    varnish_service_suffix: "-{{ varnish_instance.name }}"
  when: ('name' in varnish_instance) and (varnish_instance.name is not none)

- name: configure varnish{{ varnish_service_suffix }} service
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  with_items:
    - src: varnish.params.j2
      dest: /etc/varnish/varnish{{ varnish_service_suffix }}.params
      mode: "0644"
    - src: varnish.service.j2
      dest: /etc/systemd/system/varnish{{ varnish_service_suffix }}.service
      mode: "0644"
    - src: varnish_reload_vcl.j2
      dest: /usr/sbin/varnish_reload_vcl{{ varnish_service_suffix }}
      mode: "0755"
    - src: "{{ varnish_vcl_template }}"
      dest: /etc/varnish/{{ varnish_service_vcl }}.vcl
      mode: "0755"
  register: varnish_config
  notify:
    - reload systemd configuration
    - restart varnish

# append the actual service name to list which the "restart varnish" handler iterates
# this is neccessary because handlers cannot use variables in the same way tasks can
- name: Register varnish{{ varnish_service_suffix }} restart
  set_fact:
    varnish_service_restart: "{{ varnish_service_restart|default([]) }} + [ 'varnish{{ varnish_service_suffix }}' ]"
  when: varnish_config is changed

- name: Start varnish{{ varnish_service_suffix }} service
  service:
    name: varnish{{ varnish_service_suffix }}
    state: started
    enabled: true
